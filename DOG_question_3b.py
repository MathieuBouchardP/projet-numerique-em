
import numpy as np
import matplotlib.pyplot as plt
import time


# Enregistrez l'heure de début
temps_début = time.time()

#Conversion en milimètre
mm = 10**(-3)

# Initialisation de la matrice pour r <= 0
longueur_Z = 12*mm
hauteur_R = 3*mm

pas = 1.5*mm

dimension_en_z = longueur_Z/pas + 1 # Pour le 0 et pour le mur
dimension_en_r = hauteur_R/pas + 1 # Pour le 0 et pour le mur

matrice_pot = np.zeros((int(dimension_en_r), int(dimension_en_z))) # (3 x 9), (r x z)


""" Conditions frontières """
# Mur en angle: potentiel = -300 V. 
    # L'angle est tel que la ligne tracé par le mur a une pente de 1
for i in range(3):
    matrice_pot[(i,i)] = -300
########################################

# Mur du haut, r=30: -300V
for i in range(3,8): # Indice pour les dimension de z = [3 ; 12[ mm
    matrice_pot[(-1,i)] = -300
#################################

"""
Le potentiel est fixe au endroits suivants: 
    - L'électrode, R = 0, Z = [4.5;120[ mm : 0V      => Fixe pour indices: r == 0 and z>=45
    - Mur droit, R = [0;3], Z = 12 mm      : 0V      => Fixe pour indices: r<=30 and z == 120
    - Mur en angle, R >= Z = [0;3]  mm      : -300V  => Fixe pour indices: r>= z and z<= 30
    - Mur haut, R = 30, Z = [3;12[ mm      : -300V   => Fixe pour indices: r == 30 and z>= 30
"""
#########################################################################################

# On crée une copie de la matrice original pour toujours y avoir accès 
matrice_initiale = matrice_pot.copy()

chose = np.zeros(shape=(27,27))

r = 1.5
h = 1.5

x_1 = 0
x_2 = 0
x_3 = 0
x_4 = 0
x_5 = 0
x_6 = 0


P = np.array([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,], 
             [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, (2*r-h)/(8*r), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, (2*r-h)/(8*r), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, (2*r-h)/(8*r), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, (2*r-h)/(8*r), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 1, 1/6, 0, 0, 0, 0, 0, 0, 0, (2*r-h)/(8*r), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 1/6, 0, 0, 0, 0, 0, 0, 0, (2*r-h)/(8*r), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 1/6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 1/6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1/4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1/4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1/4, 0, 1/4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1/4, 0, 1/4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1/4, 0, 1/4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1/4, 0, 1/4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 2/3, 0, 0, 0, 0, 0, 0, 0, 1/4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 2/3, 0, 0, 0, 0, 0, 0, 0, 1/4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (2*r+h)/(8*r), 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (2*r+h)/(8*r), 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (2*r+h)/(8*r), 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (2*r+h)/(8*r), 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (2*r+h)/(8*r), 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (2*r+h)/(8*r), 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,]])

# On a créé la matrice transposé par inadvertance, il est beaucoup plus rapide de simplement la transposer pour faire nos calculs
P = np.transpose(P)
#print(P)
# Créaiton de la matrice P
"""
# Création de Q:
P = np.array([
[0, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0.25, 0.25, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0.25, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0.25, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0.25, 0.25, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0.25, 0, 0, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0.25, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0.25, 0, 0, 0, 0.25, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0.25, 0, 0.25, 0, 0.25, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0.25, 0, 0.25, 0, 0, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0.25, 0, 0, 0, 0.25, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0.25, 0, 0.25, 0, 0.25, 0, 0.25, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0.25, 0, 0.25, 0, 0, 0, 0.25, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0, 0, 0.25, 0, 0.25, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0.25, 0, 0.25, 0, 0.25, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0.25, 0, 0, 0, 0.25, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0, 0, 0.25, 0, 0.25, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0.25, 0, 0.25, 0, 0.25, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0.25, 0, 0, 0, 0.25,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0, 0, 0.25, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0, 0.25, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0.25, 0, 0.25,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0.25, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0, 0, 0.25, 0.25],
    \
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
])
"""
inverseP = np.linalg.inv(P)

CF = np.array([0, 0, 0, 0, 0, 0, 0, 8, -300, -300, 0, 0, 0, 0, 0, 0, -300, 0, -300, -300, -300, -300, -300, -300, -300, 0,0])

V = np.linalg.solve(inverseP, CF)
print(V)
V_image = np.array([[0, 0, 0, 0, 0, 0, 1.33333333, -250, -300], 
  [-300, -187.5, -112.5, -112.5, -112.5, -112.5, -187.5, -300, 0 ], 
  [-300, -300, -300, -300, -300, -300, -300, 0, 0]])

"""([[0, 0, 0, 0, 0, 0, 1.33333333, -250, -300], 
  [-300, -187.5, -112.5, -112.5, -112.5, -112.5, -187.5, -300, 0 ], 
  [-300, -300, -300, -300, -300, -300, -300, 0, 0]])
"""
plt.imshow(V_image, cmap='magma', origin='lower', extent=[0, 12, 0, 3])
plt.colorbar(label='Potentiel électrique (V)')
plt.xlabel('r (mm)')
plt.ylabel('z (mm)')
plt.title('Potentiel dans la chambre à ionisation')
plt.show()
"""t = 8 #nombre de noeud de transition
r = 19 #nombre de noeud fixes


# Chaque noeud a 6 mouvement possible:
    # 2 selon phi
    # 2 selon r
    # 2 selon z

# Chaque noeud a 2/6 chance de changer en phi, donc on le représente en le faisant rester où il est déjà
Q = 2/6* np.diag(np.ones(t),k=1)
R = np.zeros(shape=(t,r))

# Changer la probablité pour chaque noeud qui se touche

# Noeud 1
Q[0, 1] = 1/6
R[0, 8-t] = 1/6
R[0, 9-t] = 2/6 # en haut ou en bas est un mur

# Noeud 2
Q[1, 0] = 1/6
Q[1, 2] = 2/6 # En haut ou en bas
R[1, 23-t] = 1/6 # L'électrode

# Noeud 3
Q[2, 1] = 1/6
Q[2, 3] = 1/6
R[2, 9-t] = 1/6 # Mur angle
R[2, 10-t] = 1/6 # Mur sup.

# Noeud 4
Q[3, 4] = 1/6
Q[3, 2] = 1/6
R[3, 11-t] = 1/6 # Mur sup.
R[3, 23-t] = 1/6 # Électrode

# Noeud 5
Q[4, 3] = 1/6
Q[4, 5] = 1/6
R[4, 12-t] = 1/6 # Mur sup.
R[4, 22-t] = 1/6 # Électrode

# Noeud 6
Q[5, 4] = 1/6
Q[5, 6] = 1/6
R[5, 13-t] = 1/6 # Mur sup.
R[5, 21-t] = 1/6 # Élec.

# Noeud 7
Q[6, 5] = 1/6
Q[6, 7] = 1/6
R[6, 14-t] = 1/6 # mur sup
R[6, 20-t] = 1/6 # élec

# Noeud 8
Q[7, 6] = 1/6
R[7, 15-t] = 1/6 # mur sup
R[7, 19-t] = 1/6 # Élec.
R[7, 17-t] = 1/6 # Mur droit.

ZÉRO = np.zeros(shape=(r,t))
I_r = np.eye(r)

P = np.block([[Q, R], [ZÉRO, I_r]])
print(P)"""
"""
matrice_pot_inv = np.flip(matrice_pot, axis=0)
Potentiel_plan_r_z = np.concatenate((matrice_pot_inv, matrice_pot[1:,:]), axis=0)

# Faire le graphique
plt.imshow(Potentiel_plan_r_z, cmap='turbo', origin='lower', extent=[0, 13, -3.5, 3.5])
plt.colorbar(label='Potentiel électrique (V)')
plt.xlabel('Z [mm]')
plt.ylabel('Rayon [mm]')
plt.title('Potentiel dans la chambre à ionisation')

# Ajouter le nombre d'itération et le délais d'exécution sur le graphique
#plt.text(0, -5, f"Nombre d'itération: {iterations}", color='black')
#plt.text(0, -5.6, f"Temps d'exécusion: {round(temps_exécution, 2)} [s]", color='black')


plt.show()"""